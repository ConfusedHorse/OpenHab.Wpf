<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CloseApplication" xml:space="preserve">
    <value>Close Application</value>
  </data>
  <data name="ConnectionEstablished" xml:space="preserve">
    <value>Connection to the server has been established successfully.</value>
  </data>
  <data name="ConnectionIndicator" xml:space="preserve">
    <value>Check if the connection can be established.</value>
  </data>
  <data name="ConnectToServer" xml:space="preserve">
    <value>Connect to server</value>
  </data>
  <data name="IpAddress" xml:space="preserve">
    <value>IP address:</value>
  </data>
  <data name="NoConnectionEstablished" xml:space="preserve">
    <value>Could not connect to the server with given ip address.</value>
  </data>
  <data name="NotAValidIpAddress" xml:space="preserve">
    <value>Please type in a valid IP address. (e.g.: 192.168.1.1)</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="ServerAddressPrompt" xml:space="preserve">
    <value>Please type in the address of the OpenHab server component you would like to connect to.</value>
  </data>
  <data name="Sitemaps" xml:space="preserve">
    <value>Sitemaps</value>
  </data>
  <data name="Items" xml:space="preserve">
    <value>Items</value>
  </data>
  <data name="Brightness" xml:space="preserve">
    <value>Brightness</value>
  </data>
  <data name="Color" xml:space="preserve">
    <value>Color</value>
  </data>
  <data name="Saturation" xml:space="preserve">
    <value>Saturation</value>
  </data>
  <data name="FieldMustNotBeEmpty" xml:space="preserve">
    <value>Field must not be empty. Please enter a numeric value</value>
  </data>
  <data name="IllegalCharacters" xml:space="preserve">
    <value>Illegal characters, please enter numeric values only</value>
  </data>
  <data name="Things" xml:space="preserve">
    <value>Things</value>
  </data>
  <data name="StartTypeToBrowseForThings" xml:space="preserve">
    <value>Start typing to filter things...</value>
  </data>
  <data name="ConnectAutomatically" xml:space="preserve">
    <value>Connect automatically</value>
  </data>
  <data name="ConnectAutomaticallyExplanation" xml:space="preserve">
    <value>The given IP adress will be stored and connection is established automatically when possible,</value>
  </data>
  <data name="Rules" xml:space="preserve">
    <value>Rules</value>
  </data>
  <data name="StartTypeToBrowseForEverything" xml:space="preserve">
    <value>Start typing to filter everything...</value>
  </data>
  <data name="DragItemToAddAsAction" xml:space="preserve">
    <value>Drag item over the actions section to add it as an action</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="RunRule" xml:space="preserve">
    <value>Performs all actions of this rule immediately</value>
  </data>
  <data name="DeleteRule" xml:space="preserve">
    <value>Deletes this rule</value>
  </data>
  <data name="RuleToggleOff" xml:space="preserve">
    <value>This rule is currently enabled. Click to disable it.</value>
  </data>
  <data name="RuleToggleOn" xml:space="preserve">
    <value>This rule is currently disabled. Click to enable it.</value>
  </data>
  <data name="CreateRule" xml:space="preserve">
    <value>Create a new rule</value>
  </data>
  <data name="ApplicationTitle" xml:space="preserve">
    <value>OpenHAB Wpf Rule Designer</value>
  </data>
  <data name="ReconnectionAttemptFormat" xml:space="preserve">
    <value>{}Connection has been terminated. Trying to reconnect... ({0})</value>
  </data>
  <data name="Connect" xml:space="preserve">
    <value>Connect</value>
  </data>
  <data name="ConnectToAnotherServer" xml:space="preserve">
    <value>Connect to another server.</value>
  </data>
  <data name="ConnectionOnline" xml:space="preserve">
    <value>The server is online</value>
  </data>
  <data name="SaveChanges" xml:space="preserve">
    <value>Save changes</value>
  </data>
  <data name="UnsavedChanges" xml:space="preserve">
    <value>There are unsaved changes. Do you want to save them before proceeding?</value>
  </data>
  <data name="DeleteAction" xml:space="preserve">
    <value>Remove this action from the current rule</value>
  </data>
  <data name="DeleteCondition" xml:space="preserve">
    <value>Remove this condition from the current rule</value>
  </data>
  <data name="DeleteTrigger" xml:space="preserve">
    <value>Remove this trigger from the current rule</value>
  </data>
  <data name="Actions" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="Conditions" xml:space="preserve">
    <value>Conditions</value>
  </data>
  <data name="Triggers" xml:space="preserve">
    <value>Triggers</value>
  </data>
  <data name="DayOfWeek" xml:space="preserve">
    <value>Weekdays</value>
  </data>
  <data name="Repetitive" xml:space="preserve">
    <value>Repeat every</value>
  </data>
  <data name="TimeOfDay" xml:space="preserve">
    <value>Specific time</value>
  </data>
  <data name="Friday" xml:space="preserve">
    <value>Friday</value>
  </data>
  <data name="Monday" xml:space="preserve">
    <value>Monday</value>
  </data>
  <data name="Saturday" xml:space="preserve">
    <value>Saturday</value>
  </data>
  <data name="Sunday" xml:space="preserve">
    <value>Sunday</value>
  </data>
  <data name="Thursday" xml:space="preserve">
    <value>Thursday</value>
  </data>
  <data name="Tuesday" xml:space="preserve">
    <value>Tuesday</value>
  </data>
  <data name="Wednesday" xml:space="preserve">
    <value>Wednesday</value>
  </data>
  <data name="ValidateHourMinSec" xml:space="preserve">
    <value>Please enter a value between {0} and {1}</value>
  </data>
  <data name="End" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="Start" xml:space="preserve">
    <value>At</value>
  </data>
  <data name="Hour" xml:space="preserve">
    <value>Hour</value>
  </data>
  <data name="Hours" xml:space="preserve">
    <value>Hours</value>
  </data>
  <data name="Minute" xml:space="preserve">
    <value>Minute</value>
  </data>
  <data name="Minutes" xml:space="preserve">
    <value>Minutes</value>
  </data>
  <data name="Second" xml:space="preserve">
    <value>Second</value>
  </data>
  <data name="Seconds" xml:space="preserve">
    <value>Seconds</value>
  </data>
  <data name="DragItemToAddAsCondition" xml:space="preserve">
    <value>Drag item over the conditions section to add it as an condition</value>
  </data>
  <data name="DragItemToAddAsTrigger" xml:space="preserve">
    <value>Drag item over the triggers section to add it as an trigger</value>
  </data>
  <data name="DragThisToAddAsAnything" xml:space="preserve">
    <value>Drag object over any section to create according triggers and conditions</value>
  </data>
  <data name="Range" xml:space="preserve">
    <value>Toggle to enable defining a period of time</value>
  </data>
  <data name="StartRange" xml:space="preserve">
    <value>From</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="DarkTheme" xml:space="preserve">
    <value>Dark Theme</value>
  </data>
  <data name="Tools" xml:space="preserve">
    <value>Tools</value>
  </data>
  <data name="RuleEditor" xml:space="preserve">
    <value>Rule Editor ({0})</value>
  </data>
  <data name="NoRuleSelected" xml:space="preserve">
    <value>No rule selected</value>
  </data>
  <data name="English" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="German" xml:space="preserve">
    <value>German</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="SelectLanguage" xml:space="preserve">
    <value>Select language...</value>
  </data>
  <data name="MustReloadForNewCulture" xml:space="preserve">
    <value>To apply the selected changes the window must be reloaded. Do you want to proceed?</value>
  </data>
  <data name="ReloadWithNewCulture" xml:space="preserve">
    <value>Apply language selection</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="IsNotSelected" xml:space="preserve">
    <value>is not selected</value>
  </data>
  <data name="IsSelected" xml:space="preserve">
    <value>is selected</value>
  </data>
  <data name="TriggersAndTools" xml:space="preserve">
    <value>Triggers &amp; Tools</value>
  </data>
</root>